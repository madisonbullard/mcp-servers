/**
 * Shortcut API
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { StoryContents } from '../models/StoryContents';
import { HttpFile } from '../http/http';

/**
* An entity template can be used to prefill various fields when creating new stories.
*/
export class EntityTemplate {
    /**
    * A string description of this resource.
    */
    'entityType': string;
    /**
    * The unique identifier for the entity template.
    */
    'id': string;
    /**
    * The time/date when the entity template was created.
    */
    'createdAt': Date;
    /**
    * The time/date when the entity template was last updated.
    */
    'updatedAt': Date;
    /**
    * The template\'s name.
    */
    'name': string;
    /**
    * The unique ID of the member who created the template.
    */
    'authorId': string;
    /**
    * The last time that someone created an entity using this template.
    */
    'lastUsedAt': Date;
    'storyContents': StoryContents;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "entityType",
            "baseName": "entity_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "authorId",
            "baseName": "author_id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "lastUsedAt",
            "baseName": "last_used_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "storyContents",
            "baseName": "story_contents",
            "type": "StoryContents",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return EntityTemplate.attributeTypeMap;
    }

    public constructor() {
    }
}
