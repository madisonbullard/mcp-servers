/**
 * Shortcut API
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Identity } from '../models/Identity';
import { HttpFile } from '../http/http';

/**
* Commit refers to a VCS commit and all associated details.
*/
export class Commit {
    /**
    * A string description of this resource.
    */
    'entityType': string;
    /**
    * The ID of the Member that authored the Commit, if known.
    */
    'authorId': string | null;
    /**
    * The Commit hash.
    */
    'hash': string;
    /**
    * The time/date the Commit was updated.
    */
    'updatedAt': Date | null;
    /**
    * The unique ID of the Commit.
    */
    'id': number | null;
    /**
    * The URL of the Commit.
    */
    'url': string;
    /**
    * The email address of the VCS user that authored the Commit.
    */
    'authorEmail': string;
    /**
    * The time/date the Commit was pushed.
    */
    'timestamp': Date;
    'authorIdentity': Identity;
    /**
    * The ID of the Repository that contains the Commit.
    */
    'repositoryId': number | null;
    /**
    * The time/date the Commit was created.
    */
    'createdAt': Date;
    /**
    * The Commit message.
    */
    'message': string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "entityType",
            "baseName": "entity_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "authorId",
            "baseName": "author_id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "hash",
            "baseName": "hash",
            "type": "string",
            "format": ""
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string",
            "format": ""
        },
        {
            "name": "authorEmail",
            "baseName": "author_email",
            "type": "string",
            "format": ""
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "authorIdentity",
            "baseName": "author_identity",
            "type": "Identity",
            "format": ""
        },
        {
            "name": "repositoryId",
            "baseName": "repository_id",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Commit.attributeTypeMap;
    }

    public constructor() {
    }
}
