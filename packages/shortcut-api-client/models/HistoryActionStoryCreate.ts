/**
 * Shortcut API
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* An action representing a Story being created.
*/
export class HistoryActionStoryCreate {
    /**
    * The application URL of the Story.
    */
    'appUrl': string;
    /**
    * The description of the Story.
    */
    'description'?: string;
    /**
    * Whether or not the Story has been started.
    */
    'started'?: boolean;
    /**
    * The type of entity referenced.
    */
    'entityType': string;
    /**
    * An array of Task IDs on this Story.
    */
    'taskIds'?: Array<number>;
    /**
    * The type of Story; either feature, bug, or chore.
    */
    'storyType': HistoryActionStoryCreateStoryTypeEnum;
    /**
    * The name of the Story.
    */
    'name': string;
    /**
    * Whether or not the Story is completed.
    */
    'completed'?: boolean;
    /**
    * Whether or not the Story is blocking another Story.
    */
    'blocker'?: boolean;
    /**
    * The Epic ID for this Story.
    */
    'epicId'?: number;
    /**
    * The ID of the Member that requested the Story.
    */
    'requestedById'?: string;
    /**
    * The Iteration ID the Story is in.
    */
    'iterationId'?: number | null;
    /**
    * An array of Labels IDs attached to the Story.
    */
    'labelIds'?: Array<number>;
    /**
    * The Team IDs for the followers of the Story.
    */
    'groupId'?: string;
    /**
    * An array of Workflow State IDs attached to the Story.
    */
    'workflowStateId'?: number;
    /**
    * An array of Story IDs that are the object of a Story Link relationship.
    */
    'objectStoryLinkIds'?: Array<number>;
    /**
    * An array of Member IDs for the followers of the Story.
    */
    'followerIds'?: Array<string>;
    /**
    * An array of Member IDs that are the owners of the Story.
    */
    'ownerIds'?: Array<string>;
    /**
    * An array of Custom Field Enum Value ids on this Story.
    */
    'customFieldValueIds'?: Array<string>;
    /**
    * The ID of the entity referenced.
    */
    'id': number;
    /**
    * The estimate (or point value) for the Story.
    */
    'estimate'?: number;
    /**
    * An array of Story IDs that are the subject of a Story Link relationship.
    */
    'subjectStoryLinkIds'?: Array<number>;
    /**
    * The action of the entity referenced.
    */
    'action': HistoryActionStoryCreateActionEnum;
    /**
    * Whether or not the Story is blocked by another Story.
    */
    'blocked'?: boolean;
    /**
    * The Project ID of the Story is in.
    */
    'projectId'?: number;
    /**
    * The timestamp representing the Story\'s deadline.
    */
    'deadline'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "appUrl",
            "baseName": "app_url",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "started",
            "baseName": "started",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "entityType",
            "baseName": "entity_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "taskIds",
            "baseName": "task_ids",
            "type": "Array<number>",
            "format": "int64"
        },
        {
            "name": "storyType",
            "baseName": "story_type",
            "type": "HistoryActionStoryCreateStoryTypeEnum",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "completed",
            "baseName": "completed",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "blocker",
            "baseName": "blocker",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "epicId",
            "baseName": "epic_id",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "requestedById",
            "baseName": "requested_by_id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "iterationId",
            "baseName": "iteration_id",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "labelIds",
            "baseName": "label_ids",
            "type": "Array<number>",
            "format": "int64"
        },
        {
            "name": "groupId",
            "baseName": "group_id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "workflowStateId",
            "baseName": "workflow_state_id",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "objectStoryLinkIds",
            "baseName": "object_story_link_ids",
            "type": "Array<number>",
            "format": "int64"
        },
        {
            "name": "followerIds",
            "baseName": "follower_ids",
            "type": "Array<string>",
            "format": "uuid"
        },
        {
            "name": "ownerIds",
            "baseName": "owner_ids",
            "type": "Array<string>",
            "format": "uuid"
        },
        {
            "name": "customFieldValueIds",
            "baseName": "custom_field_value_ids",
            "type": "Array<string>",
            "format": "uuid"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "estimate",
            "baseName": "estimate",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "subjectStoryLinkIds",
            "baseName": "subject_story_link_ids",
            "type": "Array<number>",
            "format": "int64"
        },
        {
            "name": "action",
            "baseName": "action",
            "type": "HistoryActionStoryCreateActionEnum",
            "format": ""
        },
        {
            "name": "blocked",
            "baseName": "blocked",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "projectId",
            "baseName": "project_id",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "deadline",
            "baseName": "deadline",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return HistoryActionStoryCreate.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum HistoryActionStoryCreateStoryTypeEnum {
    Feature = 'feature',
    Chore = 'chore',
    Bug = 'bug'
}
export enum HistoryActionStoryCreateActionEnum {
    Create = 'create'
}

