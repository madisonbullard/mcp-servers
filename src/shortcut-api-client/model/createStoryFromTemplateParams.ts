/**
 * Shortcut API
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CreateLabelParams } from './createLabelParams';
import { CreateStoryCommentParams } from './createStoryCommentParams';
import { CreateStoryLinkParams } from './createStoryLinkParams';
import { CreateSubTaskParams } from './createSubTaskParams';
import { CreateTaskParams } from './createTaskParams';
import { CustomFieldValueParams } from './customFieldValueParams';
import { RemoveCustomFieldParams } from './removeCustomFieldParams';
import { RemoveLabelParams } from './removeLabelParams';

/**
* Request parameters for creating a story from a story template. These parameters are merged with the values derived from the template.
*/
export class CreateStoryFromTemplateParams {
    /**
    * The description of the story.
    */
    'description'?: string;
    /**
    * Controls the story\'s archived state.
    */
    'archived'?: boolean;
    /**
    * An array of story links attached to the story.
    */
    'storyLinks'?: Array<CreateStoryLinkParams>;
    /**
    * An array of labels attached to the story.
    */
    'labels'?: Array<CreateLabelParams>;
    /**
    * An array of External Links associated with this story. These will be added to any links provided by the template. Cannot be used in conjunction with `external_links`.
    */
    'externalLinksAdd'?: Set<string>;
    /**
    * The type of story (feature, bug, chore).
    */
    'storyType'?: CreateStoryFromTemplateParams.StoryTypeEnum;
    /**
    * A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
    */
    'customFields'?: Array<CustomFieldValueParams>;
    /**
    * One of \"first\" or \"last\". This can be used to move the given story to the first or last position in the workflow state.
    */
    'moveTo'?: CreateStoryFromTemplateParams.MoveToEnum;
    /**
    * An array of IDs of files attached to the story.
    */
    'fileIds'?: Set<number>;
    /**
    * Given this story was converted from a task in another story, this is the original task ID that was converted to this story.
    */
    'sourceTaskId'?: number | null;
    /**
    * A manual override for the time/date the Story was completed.
    */
    'completedAtOverride'?: Date;
    /**
    * The name of the story. Must be provided if the template does not provide a name.
    */
    'name'?: string;
    /**
    * An array of IDs of files attached to the story in addition to files from the template. Cannot be used in conjunction with `file_ids`.
    */
    'fileIdsAdd'?: Set<number>;
    /**
    * An array of IDs of files removed from files from the template. Cannot be used in conjunction with `file_ids`.
    */
    'fileIdsRemove'?: Set<number>;
    /**
    * An array of comments to add to the story.
    */
    'comments'?: Array<CreateStoryCommentParams>;
    /**
    * The UUIDs of the new followers to be added in addition to followers from the template. Cannot be used in conjunction with `follower_ids.`
    */
    'followerIdsAdd'?: Set<string>;
    /**
    * The ID of the epic the story belongs to.
    */
    'epicId'?: number | null;
    /**
    * The id of the story template used to create this story.
    */
    'storyTemplateId': string;
    /**
    * An array of External Links associated with this story.
    */
    'externalLinks'?: Array<string>;
    /**
    * The UUIDs of the new followers to be removed from followers from the template. Cannot be used in conjunction with `follower_ids`.
    */
    'followerIdsRemove'?: Set<string>;
    /**
    * An array of sub tasks to create.
    */
    'subTasks'?: Array<CreateSubTaskParams>;
    /**
    * An array of IDs of linked files removed from files from the template. Cannot be used in conjunction with `linked_files.`
    */
    'linkedFileIdsRemove'?: Set<number>;
    /**
    * The ID of the member that requested the story.
    */
    'requestedById'?: string;
    /**
    * The ID of the iteration the story belongs to.
    */
    'iterationId'?: number | null;
    /**
    * A map specifying a CustomField ID. These will be removed from any fields provided by the template. Cannot be used in conjunction with `custom_fields`.
    */
    'customFieldsRemove'?: Set<RemoveCustomFieldParams>;
    /**
    * An array of tasks connected to the story.
    */
    'tasks'?: Array<CreateTaskParams>;
    /**
    * A manual override for the time/date the Story was started.
    */
    'startedAtOverride'?: Date;
    /**
    * An array of labels attached to the story in addition to the labels provided by the template. Cannot be used in conjunction with `labels`.
    */
    'labelsAdd'?: Set<CreateLabelParams>;
    /**
    * The id of the group to associate with this story.
    */
    'groupId'?: string | null;
    /**
    * The ID of the workflow state the story will be in.
    */
    'workflowStateId'?: number;
    /**
    * The time/date the Story was updated.
    */
    'updatedAt'?: Date;
    /**
    * An array of UUIDs of the followers of this story.
    */
    'followerIds'?: Set<string>;
    /**
    * An array of UUIDs of the owners of this story.
    */
    'ownerIds'?: Set<string>;
    /**
    * This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.
    */
    'externalId'?: string;
    /**
    * The numeric point estimate of the story. Can also be null, which means unestimated.
    */
    'estimate'?: number | null;
    /**
    * The UUIDs of the new owners to be removed from owners from the template. Cannot be used in conjunction with `owners`.
    */
    'ownerIdsRemove'?: Set<string>;
    /**
    * A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField. These will be added to any fields provided by the template. Cannot be used in conjunction with `custom_fields`.
    */
    'customFieldsAdd'?: Set<CustomFieldValueParams>;
    /**
    * The ID of the project the story belongs to.
    */
    'projectId'?: number | null;
    /**
    * An array of IDs of linked files attached to the story in addition to files from the template. Cannot be used in conjunction with `linked_files`.
    */
    'linkedFileIdsAdd'?: Set<number>;
    /**
    * An array of IDs of linked files attached to the story.
    */
    'linkedFileIds'?: Set<number>;
    /**
    * An array of labels to remove from the labels provided by the template. Cannot be used in conjunction with `labels`.
    */
    'labelsRemove'?: Set<RemoveLabelParams>;
    /**
    * The due date of the story.
    */
    'deadline'?: Date | null;
    /**
    * The UUIDs of the new owners to be added in addition to owners from the template. Cannot be used in conjunction with `owners`.
    */
    'ownerIdsAdd'?: Set<string>;
    /**
    * The time/date the Story was created.
    */
    'createdAt'?: Date;
    /**
    * An array of External Links associated with this story. These will be removed from any links provided by the template. Cannot be used in conjunction with `external_links`.
    */
    'externalLinksRemove'?: Set<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "archived",
            "baseName": "archived",
            "type": "boolean"
        },
        {
            "name": "storyLinks",
            "baseName": "story_links",
            "type": "Array<CreateStoryLinkParams>"
        },
        {
            "name": "labels",
            "baseName": "labels",
            "type": "Array<CreateLabelParams>"
        },
        {
            "name": "externalLinksAdd",
            "baseName": "external_links_add",
            "type": "Set<string>"
        },
        {
            "name": "storyType",
            "baseName": "story_type",
            "type": "CreateStoryFromTemplateParams.StoryTypeEnum"
        },
        {
            "name": "customFields",
            "baseName": "custom_fields",
            "type": "Array<CustomFieldValueParams>"
        },
        {
            "name": "moveTo",
            "baseName": "move_to",
            "type": "CreateStoryFromTemplateParams.MoveToEnum"
        },
        {
            "name": "fileIds",
            "baseName": "file_ids",
            "type": "Set<number>"
        },
        {
            "name": "sourceTaskId",
            "baseName": "source_task_id",
            "type": "number"
        },
        {
            "name": "completedAtOverride",
            "baseName": "completed_at_override",
            "type": "Date"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "fileIdsAdd",
            "baseName": "file_ids_add",
            "type": "Set<number>"
        },
        {
            "name": "fileIdsRemove",
            "baseName": "file_ids_remove",
            "type": "Set<number>"
        },
        {
            "name": "comments",
            "baseName": "comments",
            "type": "Array<CreateStoryCommentParams>"
        },
        {
            "name": "followerIdsAdd",
            "baseName": "follower_ids_add",
            "type": "Set<string>"
        },
        {
            "name": "epicId",
            "baseName": "epic_id",
            "type": "number"
        },
        {
            "name": "storyTemplateId",
            "baseName": "story_template_id",
            "type": "string"
        },
        {
            "name": "externalLinks",
            "baseName": "external_links",
            "type": "Array<string>"
        },
        {
            "name": "followerIdsRemove",
            "baseName": "follower_ids_remove",
            "type": "Set<string>"
        },
        {
            "name": "subTasks",
            "baseName": "sub_tasks",
            "type": "Array<CreateSubTaskParams>"
        },
        {
            "name": "linkedFileIdsRemove",
            "baseName": "linked_file_ids_remove",
            "type": "Set<number>"
        },
        {
            "name": "requestedById",
            "baseName": "requested_by_id",
            "type": "string"
        },
        {
            "name": "iterationId",
            "baseName": "iteration_id",
            "type": "number"
        },
        {
            "name": "customFieldsRemove",
            "baseName": "custom_fields_remove",
            "type": "Set<RemoveCustomFieldParams>"
        },
        {
            "name": "tasks",
            "baseName": "tasks",
            "type": "Array<CreateTaskParams>"
        },
        {
            "name": "startedAtOverride",
            "baseName": "started_at_override",
            "type": "Date"
        },
        {
            "name": "labelsAdd",
            "baseName": "labels_add",
            "type": "Set<CreateLabelParams>"
        },
        {
            "name": "groupId",
            "baseName": "group_id",
            "type": "string"
        },
        {
            "name": "workflowStateId",
            "baseName": "workflow_state_id",
            "type": "number"
        },
        {
            "name": "updatedAt",
            "baseName": "updated_at",
            "type": "Date"
        },
        {
            "name": "followerIds",
            "baseName": "follower_ids",
            "type": "Set<string>"
        },
        {
            "name": "ownerIds",
            "baseName": "owner_ids",
            "type": "Set<string>"
        },
        {
            "name": "externalId",
            "baseName": "external_id",
            "type": "string"
        },
        {
            "name": "estimate",
            "baseName": "estimate",
            "type": "number"
        },
        {
            "name": "ownerIdsRemove",
            "baseName": "owner_ids_remove",
            "type": "Set<string>"
        },
        {
            "name": "customFieldsAdd",
            "baseName": "custom_fields_add",
            "type": "Set<CustomFieldValueParams>"
        },
        {
            "name": "projectId",
            "baseName": "project_id",
            "type": "number"
        },
        {
            "name": "linkedFileIdsAdd",
            "baseName": "linked_file_ids_add",
            "type": "Set<number>"
        },
        {
            "name": "linkedFileIds",
            "baseName": "linked_file_ids",
            "type": "Set<number>"
        },
        {
            "name": "labelsRemove",
            "baseName": "labels_remove",
            "type": "Set<RemoveLabelParams>"
        },
        {
            "name": "deadline",
            "baseName": "deadline",
            "type": "Date"
        },
        {
            "name": "ownerIdsAdd",
            "baseName": "owner_ids_add",
            "type": "Set<string>"
        },
        {
            "name": "createdAt",
            "baseName": "created_at",
            "type": "Date"
        },
        {
            "name": "externalLinksRemove",
            "baseName": "external_links_remove",
            "type": "Set<string>"
        }    ];

    static getAttributeTypeMap() {
        return CreateStoryFromTemplateParams.attributeTypeMap;
    }
}

export namespace CreateStoryFromTemplateParams {
    export enum StoryTypeEnum {
        Feature = <any> 'feature',
        Chore = <any> 'chore',
        Bug = <any> 'bug'
    }
    export enum MoveToEnum {
        Last = <any> 'last',
        First = <any> 'first'
    }
}
